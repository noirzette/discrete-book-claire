<?xml version="1.0" encoding="UTF-8"?>
<section xml:id="s-coding-theory-groups">
<title>Coding Theory, Group Codes</title>
<idx>Coding Theory</idx>
<idx><h>Codes</h><h>Group</h></idx>
<introduction><title>A Transmission Problem</title>
<p>In this section, we will introduce the basic ideas involved in coding theory and consider solutions of a coding problem by means of group codes.</p>
<p>Imagine a situation in which information is being transmitted between two points. The information takes the form of high and low pulses (for example, radio waves or electric currents), which we will label 1 and 0, respectively.  As these pulses are sent and received,
they are grouped together in blocks.  of fixed length.   The length determines how much information can be contained in one block.  If
the length is \(r\), there are \(2^r\) different values that a block can have. If the information being sent takes the form of text, each block might
be a character. In that case, the length of a block may be seven, so that \(2^7 = 128\) block values can represent letters (both upper and lower
case), digits, punctuation, and so on.  During the transmission of data, noise can alter the signal so that what is received differs from what is sent. <xref ref="fig-noise" text="type-global" /> illustrates the problem that can be encountered if information is transmitted between two points.</p>

            <figure xml:id="fig-noise">
                <caption>A noisy transmission
                </caption>
                <image width="60%" source="images/fig-noise.png">
                    <description>A noisy transmission</description>
                </image>
            </figure>

<p><term>Noise</term> is a fact of life for anyone who tries to transmit information.  Fortunately, in most situations, we could expect a high percentage of the pulses that are sent to be received properly. However, when large numbers of pulses are transmitted, there are usually some errors due to noise. For the remainder of the discussion, we will make assumptions about the nature of the noise and the message that we want to
send. Henceforth, we will refer to the pulses as bits.</p>

  
<p>We will assume that our information is being sent along a <term>binary symmetric channel</term>. By this, we mean that any single bit that is transmitted will be received improperly with a certain fixed probability, <m>p</m>, independent of the bit value.   The magnitude of \(p\) is usually quite small. To illustrate the process,
we will assume that \(p = 0.001\), which, in the real world, would be considered somewhat large. Since \(1 - p = 0.999\), we can expect \(99.9\%\) of all bits to be properly received.</p>

<p>Suppose that our message consists of 3,000 bits of information, to be sent in blocks of three bits each. Two factors will be considered in evaluating
a method of transmission. The first is the probability that the message is received with no errors. The second is the number of bits that will be
transmitted in order to send the message. This quantity is called the rate of transmission:
\[\textrm{ Rate}= \frac{\textrm{ Message length}}{\textrm{ Number of bits transmitted}}\]
As you might expect, as we devise methods to improve the probability of success, the rate will decrease.</p>


<p>Suppose that we ignore the noise and transmit the message without any coding. The probability of success is \(0.999^{3000}= 0.0497124\).  Therefore we only successfully receive the message in a totally correct form less than \(5\%\) of the time.  The rate of \(\frac{3000}{3000} = 1\) certainly doesn't
offset this poor probability.</p>

<p>Our strategy  for improving our chances of success will be to send an encoded message across the binary symmetric channel. The encoding will be done in such a way that small errors can be identified and corrected. This idea is illustrated in <xref ref="fig-coding-process" text="type-global" />.</p>

        <figure xml:id="fig-coding-process">
                <caption>The Coding Process
                </caption>
                <image width="80%" source="images/fig-coding-process.png">
                    <description>The Coding Process</description>
                </image>
            </figure>



<p>In our examples, the functions that will correspond to our encoding and decoding devices will all be homomorphisms between Cartesian products of \(\mathbb{Z}_2\).</p>
</introduction>
<subsection xml:id="ss-error-detection"><title>Error Detection</title>
<p>Suppose that each block of three bits \(a = \left(a_1, a_2 , a_3 \right)\) is encoded with the
function \(e: \mathbb{Z}_2{}^3\to \mathbb{Z}_2{}^4\), where
\[e(a) = \left(a _1, a _2 , a _3, a_1+_2a_2+_2a_3 \right)\]
When the encoded block is received, the four bits will probably all be correct (they are correct approximately \(99.6\%\) of the time), but the added bit that is sent will make it possible to detect single errors in the block. Note that when \(e(a)\) is transmitted, the sum of its components is
\(a_1+_2 a_2 +_2 a_3+_2 \left( a_1+_2 a_2+_2 a_3\right)= 0\), since  \(a_i+a_i=0\) in \(\mathbb{Z}_2\).</p>
<p>If any single bit is garbled by noise, the sum of the received bits will be 1. The last bit of \(e(a)\) is called the parity bit. A parity error occurs if the sum of the received bits is 1. Since more than one error is unlikely when <m>p</m> is small, a high percentage of all errors can be detected.</p>
<p>At the receiving end, the decoding function acts on the four-bit block \(b = \left(b_1,b _2 ,b_3,b_4 \right)\) with the function  \(d: \mathbb{Z}_2{}^4\to \mathbb{Z}_2^4\), where
\[d(b) = \left(b_1,b _2 ,b_3,b_1+_2b _2 +_2b_3+_2b_4 \right)\]
The fourth bit is called the parity-check bit. If no parity error occurs, the first three bits are recorded as part of the message. If a parity error occurs, we will assume that a retransmission of that block can be requested. This request can take the form of automatically having the parity-check bit of \(d(b)\) sent back to the source. If 1 is received, the previous block is retransmitted; if 0 is received, the next block is sent. This assumption of two-way communication is significant, but it is desirable to make this coding system useful. It is reasonable to expect that the probability of a transmission error in the opposite direction is also 0.001.  Without going into the details, we will report that the probability of success is
approximately 0.990 and the rate is approximately 3/5. The rate includes the transmission of the parity-check bit to the source.
</p></subsection>

<subsection xml:id="ss-error-correction"><title>Error Correction</title>
<p>Next, we will consider a coding process that can correct errors at the receiving end so that
only one-way communication is needed. Before we begin, recall that every element of \(\mathbb{Z}_2{}^n\), \(n \geq  1\), is its own inverse; that is, \(-b = b\). Therefore, \(a - b = a + b\).</p>
<p>Noisy three-bit message blocks are difficult to transmit because they are so similar to one another. If <m>a</m> and <m>b</m> are in \(\mathbb{Z}_2{}^3\), their difference, \(a +_2 b\), can be thought of as a measure of how close they are. If <m>a</m> and <m>b</m> differ in only one bit position, one error can change one into the other. The encoding that we will introduce takes a block \(a = \left(a_1, a_2, a_3 \right)\) and produces a block of length 6 called the <term>code word</term> of <m>a</m>. The code words are selected so that they are farther from one another than the messages are. In fact, each code word will differ from each other code word by at least three bits. As a result, any single error will not push a code word close enough to another code word to cause confusion. Now for the details.</p>

<p> Let
\(G=\left(
\begin{array}{cccccc}
 1 &amp; 0 &amp; 0 &amp; 1 &amp; 1 &amp; 0 \\
 0 &amp; 1 &amp; 0 &amp; 1 &amp; 0 &amp; 1 \\
 0 &amp; 0 &amp; 1 &amp; 0 &amp; 1 &amp; 1 \\
\end{array}
\right)\).  We call \(G\) the generator matrix  for the code, and let \(a = \left(a_1, a_2, a_3 \right)\) be our message.</p>
<p>Define \(e : \mathbb{Z}_2{}^3 \to \mathbb{Z}_2{}^6\) by
\[e(a) = a G = \left(a_1, a_2, a_3,a_4, a_5, a_6\right)\]
where
\[
\begin{array}{r@{}r@{}r@{}r@{}r@{}r@{}r@{}}
      a_4  &amp;= &amp; a_1 &amp;  {}+_2{}     &amp;  a_2  &amp;       &amp;        \\
      a_5  &amp;= &amp; a_1 &amp;              &amp;       &amp;{}+_2{}  &amp; a_3  \\
      a_6  &amp;= &amp;  &amp;              &amp;  a_2   &amp;{}+_2{}  &amp; a_3  \\
\end{array}\]
</p>

<p>Notice that <m>e</m> is a homomorphism.  Also, if <m>a</m> and <m>b</m> are distinct elements of \(\mathbb{Z}_2{}^3\), then \(c = a + b\) has at
least one coordinate equal to 1. Now consider the difference between \(e(a)\) and \(e(b)\):
<me>
\begin{split}
e(a) + e(b) &amp;= e(a + b) \\
	&amp; = e(c)\\
	&amp; = \left(d_1, d_2, d_3, d_4, d_5, d_6\right)\\
\end{split}
</me>
Whether <m>c</m> has 1, 2, or 3 ones, \(e(c)\) must have at least three ones.  This can be seen by considering the three cases separately.  For example, if <m>c</m> has a single one, two of the parity bits are also 1.  Therefore, \(e(a)\) and \(e(b)\) differ in at least three bits.</p>
<p>Now consider the problem of decoding the code words. Imagine that a code word, \(e(a)\), is transmitted, and \(b= \left(b_1, b_2, b_3,b_4, b_5, b_6\right)\)
is received. At the receiving end, we know the formula for \(e(a)\), and if no error has occurred in transmission,

\[\begin{array}{c}
 b_1= a_1 \\
 b_2=a_2 \\
 b_3=a_3 \\
 b_4=a_1+_2a_2 \\
 b_5=a_1+_2a_3 \\
 b_6=a_2+_2a_3 \\
\end{array}
 \Rightarrow 
\begin{array}{r@{}r@{}r@{}r@{}r@{}r@{}r@{}r@{}r@{}r@{}r@{}r@{}}
b_1 &amp; +_2 &amp; b_2 &amp;      &amp;   &amp;+_2&amp; b_4&amp;    &amp;     &amp;    &amp;   &amp;=0\\
b_1 &amp;     &amp;     &amp; +_2  &amp;b_3&amp;   &amp;    &amp; +_2&amp; b_5 &amp;    &amp;   &amp;=0\\
    &amp;     &amp; b_2 &amp; +_2  &amp;b_3&amp;   &amp;    &amp;    &amp;     &amp;+_2 &amp;b_6&amp;=0\\
\end{array}

 \]

The three equations on the right are called parity-check equations. If any of them are not true, an error has occurred. This error checking can be described in matrix form.</p>
<p>Let
\[P=\left(
\begin{array}{ccc}
 1 &amp; 1 &amp; 0 \\
 1 &amp; 0 &amp; 1 \\
 0 &amp; 1 &amp; 1 \\
 1 &amp; 0 &amp; 0 \\
 0 &amp; 1 &amp; 0 \\
 0 &amp; 0 &amp; 1 \\
\end{array}
\right)\]
</p>

<p><m>P</m> is called the parity-check matrix for this code. Now define \(p:\mathbb{Z}_2{}^6 \to \mathbb{Z}_2{}^3\) by \(p(b) = b P\).  We call
\(p(b)\) the syndrome of the received block. For example,
\(p(0,1,0,1,0,1)=(0,0,0)\)  and   \(p(1,1,1,1,0,0)=(1,0,0)\)</p>

<p>Note that <m>p</m> is also a homomorphism. If the syndrome of a block is \((0, 0, 0)\), we can be almost certain that the message block is \(\left(b_1, b_2, b_3\right)\). </p>
<p>Next we turn to the method of correcting errors. Despite the fact that there are only eight code words, one for each three-bit block value, the set of possible received blocks is \(\mathbb{Z}_2{}^6\), with 64 elements. Suppose that <m>b</m> is not a code word, but that it differs from a code word by exactly one bit. In other words, it is the result of a single error in transmission. Suppose that <m>w</m> is the code word that \(b\) is closest to and that they differ in the first bit. Then \(b + w = (1, 0, 0, 0, 0, 0)\) and

<me>
\begin{split}
p(b) &amp; = p(b) + p(w)\quad \textrm{  since }p(w) = (0, 0, 0)\\
	&amp;=p(b+w)\quad\textrm{ since }p \textrm{ is a homomorphism}\\
	&amp; =p(1,0,0,0,0,0)\\
	&amp; =(1,1,0)\\
\end{split}
</me>
</p>
<p>Note that we haven't specified <m>b</m> or <m>w</m>, only that they differ in the first bit. Therefore, if <m>b</m> is received, there was probably an error in the first bit and \(p(b)
= (1, 1, 0)\), the transmitted code word was probably \(b + (1, 0, 0, 0, 0, 0)\) and the message block was \(\left(b_1+_2 1, b_2, b_3\right)\). The same analysis can be done if <m>b</m> and <m>w</m> differ in any of the other five bits.</p>
<p>This process can be described in terms of cosets. Let <m>W</m> be the set of code words; that is, \(W = e\left(\mathbb{Z}_2{}^3 \right)\). Since \(e\) is a homomorphism, \(W\) is a subgroup of \(\mathbb{Z}_2{}^6\). Consider the factor group \(\left.\mathbb{Z}_2{}^6\right/W\):

<me>
\lvert \mathbb{Z}_2{}^6/W \rvert =\frac{\lvert \mathbb{Z}_2{}^6 \rvert }{\lvert W \rvert}=\frac{64}{8}=8
</me>
</p>
<p>Suppose that \(b_1\) and \(b_2\) are representatives of the same coset. Then \(b_1= b_2+w\) for some <m>w</m> in <m>W</m>.  Therefore,

<me>\begin{split}
p\left(b _1\right) &amp;= p\left(b_1\right) + p(w)\quad \textrm{ since } p(w) = (0, 0, 0)\\
 &amp;= p\left(b_1 + w\right)\\
 &amp;= p\left(b_2 \right)\\
\end{split}
</me>
and so \(b_1\) and \(b_2\) have the same syndrome.</p>
<p>Finally, suppose that \(d_1\) and \(d_2\) are distinct and both have only a single coordinate equal to 1. Then \(d_1+d_2\) has exactly two ones.
Note that the identity of \(\mathbb{Z}_2{}^6\),  \((0, 0, 0, 0, 0, 0)\), must be in <m>W</m>. Since \(d_1+d_2\) differs from the identity by two
bits, \(d_1+d_2 \notin  W\).   Hence \(d_1\) and \(d_2\) belong to distinct cosets. The reasoning above serves as a proof of the following theorem.</p>

<theorem xml:id="theorem-coset-reps-coding"><statement><p>There is a system of distinguished representatives of \(\left.\mathbb{Z}_2{}^6\right/W\) such that each of the six-bit blocks having a single 1 is a distinguished representative of its own coset.</p></statement></theorem> 
<p>Now we can describe the error-correcting process. First match each of the blocks with a single 1 with its syndrome. In addition, match the identity of \(W\) with the syndrome \((0, 0, 0)\) as in the table below. Since there are eight cosets of \(W\), select any representative of the eighth coset to be distinguished.
This is the coset with syndrome \((1, 1, 1)\).


\[\begin{array}{c|c}
 
\begin{array}{c}
 \textrm{ Syndrome} \\
 \hline
\begin{array}{ccc}
 0 &amp; 0 &amp; 0 \\
 1 &amp; 1 &amp; 0 \\
 1 &amp; 0 &amp; 1 \\
 0 &amp; 1 &amp; 1 \\
 1 &amp; 0 &amp; 0 \\
 0 &amp; 1 &amp; 0 \\
 0 &amp; 0 &amp; 1 \\
 1 &amp; 1 &amp; 1 \\
\end{array}
 \\
\end{array}
 &amp; 	  
\begin{array}{c}
 \textrm{ Error} \textrm{ Correction} \\
 \hline
 \begin{array}{cccccc}
 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 \\
 1 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 \\
 0 &amp; 1 &amp; 0 &amp; 0 &amp; 0 &amp; 0 \\
 0 &amp; 0 &amp; 1 &amp; 0 &amp; 0 &amp; 0 \\
 0 &amp; 0 &amp; 0 &amp; 1 &amp; 0 &amp; 0 \\
 0 &amp; 0 &amp; 0 &amp; 0 &amp; 1 &amp; 0 \\
 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 1 \\
 1 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 1 \\
\end{array}
 \\
\end{array}
 \\
\end{array}\]
</p>

<p>When block <m>b</m> is received, you need only compute the syndrome, \(p(b)\), and
add to <m>b</m> the error correction that matches \(p(b)\).</p>
<p>We will conclude this example by computing the probability of success for our hypothetical situation. It is  \(\left(0.999^6 + 6\ 0.999^5 \times 0.001\right)^{1000}=0.985151\).
The rate for this code is \(\frac{1}{2}\).
</p>
</subsection>
<exercises xml:id="exercises-15-5">
<title>Exercises for Section 15.5</title>
<exercise number="1"><statement><p> If the error-detecting code is being used, how would you act on the following received blocks?
<ol label="(a)">
<li><p> \((1, 0, 1, 1)\)</p></li>
<li><p> \((1, 1, 1, 1)\)</p></li>
<li><p> \((0, 0, 0, 0)\)</p></li>
</ol>
</p></statement>
<answer><p>
<ol label="(a)">
<li><p> Error detected, since an odd number of 1's was received; ask for retransmission.</p></li>
<li><p> No error detected; accept this block.</p></li>
<li><p> No error detected; accept this block.</p></li>
</ol>
</p></answer>
</exercise>
<exercise number="2"><statement><p>  Express the encoding and decoding functions for the error-detecting code using matrices.
</p></statement>
</exercise>
<exercise number="3"><statement><p>  If the error-correcting code is being used, how would you decode the following blocks? Expect a problem with one of these. Why?
<ol label="(a)">
<li><p> \((1,0,0,0,1,1)\)</p></li>
<li><p> \((1,0,1,0,1,1)\)</p></li>
<li><p> \((0,1,1,1,1,0)\)</p></li>
<li><p>  \((0,0,0,1,1,0)\)</p></li>
</ol>
</p></statement>
<answer><p>
<ol label="(a)">
<li><p> Syndrome = \((1, 0, 1)\). Corrected message is \((1, 1, 0)\).</p></li>
<li><p> Syndrome = \((1, 1,0)\). Corrected message is \((0, 0, 1)\).</p></li>
<li><p> Syndrome = \((0,0,0)\).  No error, message is \((0, 1, 1)\).</p></li>
<li><p> Syndrome = \((1, 1,0)\). Corrected message is \((1, 0, 0)\).</p></li>
<li><p> Syndrome = \((1, 1, 1)\). This syndrome occurs only if two bits have been switched. No reliable correction is possible.</p></li>
</ol>
</p></answer>
</exercise>
<exercise number="4"><statement><p>  Describe how the triple-repetition code with encoding function, \(e:\mathbb{Z}_2\to \mathbb{Z}_2{}^3\), where \(e\left(a_1\right) = \left(a_1,a_1,a_1\right)\)
can allow us to correct a single error. What is the probability of success for the \(p = 0.001\), 3000-bit situation?  What are the generator and
parity-check matrices for this code?</p></statement></exercise>
<exercise number="5"><statement><p>Consider the  linear code defined by the generator matrix
\[G=\left(
\begin{array}{cccc}
 1 &amp; 0 &amp; 1 &amp; 0 \\
 0 &amp; 1 &amp; 1 &amp; 1 \\
\end{array}
\right)\]</p>
<p>
<ol label="(a)">
<li><p>  What size blocks does this code encode and what is the length of the code words?</p></li>
<li><p>  What are the code words for this code?</p></li>
<li><p>  With this code, can you detect single bit errors?  Can you correct all, some, or no single bit errors?</p></li>
</ol>  
</p></statement>
<answer><p> Let <m>G</m> be the \(9 \times 10\) matrix obtained by augmenting the \(9\times 9\) identity matrix with a column of ones. The function \(e:\mathbb{Z}_2{}^9\to \mathbb{Z}_2{}^{10}\)  defined by \(e(a) = a G\) will allow us to detect single errors, since \(e(a)\) will always have an even number of ones.</p>
</answer>
</exercise>
<exercise number="6"><title>Rectangular codes</title>
<idx>Rectangular codes</idx>
<statement><p>To build a rectangular code, you partition your message into blocks of length <m>m</m> and then factor \(m\) into \(k_1\cdot k_2\)  and arrange the bits in a  \(k_1 \times k_2\) rectangular array as in the figure below.  Then you add parity bits along the right side and bottom of the rows and columns.   The code word is then read row by row.    

  \[\begin{array}{cccccc}
 \blacksquare  &amp; \blacksquare  &amp; \blacksquare  &amp; \cdots  &amp; \blacksquare  &amp; \square  \\
 \blacksquare  &amp; \blacksquare  &amp; \blacksquare  &amp; \cdots  &amp; \blacksquare  &amp; \square  \\
 \vdots  &amp; \vdots  &amp; \vdots  &amp;   &amp; \vdots  &amp; \vdots  \\
 \blacksquare  &amp; \blacksquare  &amp; \blacksquare  &amp; \cdots  &amp; \blacksquare  &amp; \square  \\
 \square  &amp; \square  &amp; \square  &amp; \cdots  &amp; \square  &amp;   \\
\end{array}  \quad \begin{array}{c}
 \textrm{      }\blacksquare  = \textrm{ message} \textrm{ bit} \\
 \square  =\textrm{ parity} \textrm{ bit} \\
\end{array}\]
</p>
<p>For example, if <m>m</m> is 4, then our only choice is a 2 by 2 array.  The message 1101 would be encoded as 
<me>\begin{array}{cc|c}
1 &amp; 1 &amp; 0\\
0 &amp; 1 &amp; 1\\
\hline
1 &amp; 0 &amp;\\
\end{array}</me>
and the code word is the string 11001110.</p>
<p>
<ol label="(a)">
<li><p>Suppose that you were sent four bit messages using this code and you received the following strings.  What were the messages, assuming no more than one error in the transmission of coded data?
			<ol label="(i)" cols="3">
			<li><p>11011000</p></li>
			<li><p>01110010</p></li>
			<li><p>10001111</p></li>
			</ol></p></li>
<li><p>If you encoded \(n^2\) bits in this manner, what would be the rate of the code?</p></li>
<li><p>Rectangular codes are linear codes.  For the 3 by 2 rectangular code, what are the generator and parity check matrices?</p></li>
</ol>
</p></statement>
</exercise>
</exercises>
</section>
